/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Tool.java
 *
 * Created on 31/03/2010, 15:36:03
 */

package viewer.main;

import builder.tree.ToolTipTreeNode;
import data.mining.Cluster;
import data.processing.Controller;
import java.beans.PropertyVetoException;
import java.util.logging.Level;
import java.util.logging.Logger;
import viewer.main.tree.TraceTree;
import viewer.main.tree.TreeDisplay;
import java.awt.Container;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JTree;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeSelectionModel;
import log.messages.LOG;
import utils.SwingWorker;
import javax.swing.JInternalFrame;
import javax.swing.JLayeredPane;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import viewer.main.tree.ObjectList;

/**
 *
 * @author Luciana
 */
public class Tool extends javax.swing.JFrame implements TreeSelectionListener{
    private String strCurrentPath="";
    private String strCurrentPathSelected="";
    private String strCurrentFilePath="";
    private JTree jtree=null;
    private builder.tree.Tree tree = null;
    private String system = "";
    private JInternalFrame jInternalFrameTree;
    private Cluster[] clusters;
    private String requiredMethod = "";
    private int size = 0;
    private JTree jtreeGSP=null;
    private DefaultMutableTreeNode sequenceTree = null;
    private ArrayList<ToolTipTreeNode> objectList;
    private ObjectList list;

    /** Creates new form Tool */
    public Tool() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPaneDivisor = new javax.swing.JSplitPane();
        jScrollPaneTree = new javax.swing.JScrollPane();
        jSplitPaneMiddle = new javax.swing.JSplitPane();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel = new javax.swing.JPanel();
        jPanelRepository = new javax.swing.JPanel();
        txtFPath = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jButton = new javax.swing.JButton();
        jTab = new javax.swing.JTabbedPane();
        jPanelCompressors = new javax.swing.JPanel();
        jPanelNorthCompressor = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jComboBoxStep1 = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jComboBoxStep2 = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jComboBoxStep3 = new javax.swing.JComboBox();
        this.jComboBoxStep3.setVisible(false);
        jLabel15 = new javax.swing.JLabel();
        this.jLabel15.setVisible(false);
        txtMetrics = new javax.swing.JTextField();
        this.txtMetrics.setVisible(false);
        jLabel16 = new javax.swing.JLabel();
        txtFieldSelectedTraceCompressor = new javax.swing.JTextField();
        btnExecutePreProcessingg = new javax.swing.JButton();
        btnDeleteDirectoriess = new javax.swing.JButton();
        jPanelRemoveUtility = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txFile = new javax.swing.JTextField();
        btnGetStructure = new javax.swing.JButton();
        jBtnObjectList = new javax.swing.JButton();
        jButtonGroupClasses = new javax.swing.JButton();
        jPanelFeatures = new javax.swing.JPanel();
        jPanelFeature_South = new javax.swing.JPanel();
        jButtonFeature = new javax.swing.JButton();
        jTxtFeature = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanelSequenceMining = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txFilePath = new javax.swing.JTextField();
        btnGetStructure1 = new javax.swing.JButton();
        txtFSupport = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanelText = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPaneMessages = new javax.swing.JTextPane();
        jPanelProgress = new javax.swing.JPanel();
        labelProgressTask = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Summarizer Tool");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(843, 667));
        setName("Tool"); // NOI18N
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jSplitPaneDivisor.setBorder(null);
        jSplitPaneDivisor.setDividerLocation(300);
        jSplitPaneDivisor.setResizeWeight(0.4);
        jSplitPaneDivisor.setAutoscrolls(true);
        jSplitPaneDivisor.setMinimumSize(new java.awt.Dimension(843, 667));
        jSplitPaneDivisor.setPreferredSize(new java.awt.Dimension(843, 667));

        jScrollPaneTree.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Trace Repository ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Microsoft Sans Serif", 0, 11))); // NOI18N
        jScrollPaneTree.setViewportBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPaneTree.setMinimumSize(new java.awt.Dimension(180, 300));
        jScrollPaneTree.setPreferredSize(new java.awt.Dimension(278, 590));
        jSplitPaneDivisor.setLeftComponent(jScrollPaneTree);

        jSplitPaneMiddle.setDividerLocation(470);
        jSplitPaneMiddle.setResizeWeight(0.4);
        jSplitPaneMiddle.setAutoscrolls(true);
        jSplitPaneMiddle.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSplitPaneMiddle.setRightComponent(jLayeredPane1);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane2.setAutoscrolls(true);
        jScrollPane2.setMinimumSize(new java.awt.Dimension(200, 660));

        jPanel.setMaximumSize(new java.awt.Dimension(368, 350));
        jPanel.setMinimumSize(new java.awt.Dimension(368, 300));
        jPanel.setPreferredSize(new java.awt.Dimension(368, 300));

        jPanelRepository.setMaximumSize(new java.awt.Dimension(368, 20));
        jPanelRepository.setMinimumSize(new java.awt.Dimension(100, 20));
        jPanelRepository.setPreferredSize(new java.awt.Dimension(368, 20));

        txtFPath.setEditable(false);
        txtFPath.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));

        jLabel10.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        jLabel10.setText("Repository:");

        jButton.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 11));
        jButton.setText("...");
        jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelRepositoryLayout = new javax.swing.GroupLayout(jPanelRepository);
        jPanelRepository.setLayout(jPanelRepositoryLayout);
        jPanelRepositoryLayout.setHorizontalGroup(
            jPanelRepositoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelRepositoryLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFPath, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );
        jPanelRepositoryLayout.setVerticalGroup(
            jPanelRepositoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRepositoryLayout.createSequentialGroup()
                .addGroup(jPanelRepositoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtFPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTab.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        jTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabMouseClicked(evt);
            }
        });

        jPanelCompressors.setPreferredSize(new java.awt.Dimension(400, 258));
        jPanelCompressors.setLayout(new java.awt.BorderLayout());

        jPanelNorthCompressor.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        jPanelNorthCompressor.setPreferredSize(new java.awt.Dimension(494, 256));

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Steps for the data pre-processing ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Microsoft Sans Serif", 0, 11))); // NOI18N
        jPanel9.setFocusable(false);
        jLabel9.setVisible(false);

        jLabel7.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        jLabel7.setText("Step 1:");
        jPanel9.add(jLabel7);

        jComboBoxStep1.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        jComboBoxStep1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Compressor", "Minimum Granularity" }));
        jComboBoxStep1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxStep1ItemStateChanged(evt);
            }
        });
        jComboBoxStep1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxStep1ActionPerformed(evt);
            }
        });
        jPanel9.add(jComboBoxStep1);

        jLabel8.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        jLabel8.setText("Step 2:");
        jPanel9.add(jLabel8);

        jComboBoxStep2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Minimum Granularity", "Compressor" }));
        jComboBoxStep2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxStep2ItemStateChanged(evt);
            }
        });
        jPanel9.add(jComboBoxStep2);

        jLabel9.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        jLabel9.setText("Step 3:");
        jPanel9.add(jLabel9);

        jComboBoxStep3.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        jComboBoxStep3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Compressor", "Minimum Granularity" }));
        jComboBoxStep3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxStep3ItemStateChanged(evt);
            }
        });
        jPanel9.add(jComboBoxStep3);

        jLabel15.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        jLabel15.setText("Minimum Granularity :");
        jPanel9.add(jLabel15);

        txtMetrics.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        jPanel9.add(txtMetrics);

        jLabel16.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        jLabel16.setText("Selected Trace:");

        txtFieldSelectedTraceCompressor.setEditable(false);
        txtFieldSelectedTraceCompressor.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 10));

        btnExecutePreProcessingg.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        btnExecutePreProcessingg.setText("");
        btnExecutePreProcessingg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecutePreProcessinggActionPerformed(evt);
            }
        });

        btnDeleteDirectoriess.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        btnDeleteDirectoriess.setText("Delete Selected Trace");

        javax.swing.GroupLayout jPanelNorthCompressorLayout = new javax.swing.GroupLayout(jPanelNorthCompressor);
        jPanelNorthCompressor.setLayout(jPanelNorthCompressorLayout);
        jPanelNorthCompressorLayout.setHorizontalGroup(
            jPanelNorthCompressorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNorthCompressorLayout.createSequentialGroup()
                .addGroup(jPanelNorthCompressorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelNorthCompressorLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanelNorthCompressorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnDeleteDirectoriess)
                            .addGroup(jPanelNorthCompressorLayout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addGap(2, 2, 2)
                                .addComponent(txtFieldSelectedTraceCompressor, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnExecutePreProcessingg)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelNorthCompressorLayout.setVerticalGroup(
            jPanelNorthCompressorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNorthCompressorLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanelNorthCompressorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(txtFieldSelectedTraceCompressor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExecutePreProcessingg))
                .addGap(18, 18, 18)
                .addComponent(btnDeleteDirectoriess)
                .addGap(46, 46, 46))
        );

        jPanelCompressors.add(jPanelNorthCompressor, java.awt.BorderLayout.PAGE_START);

        jTab.addTab("Pre-Processing", jPanelCompressors);

        jPanelRemoveUtility.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        jPanelRemoveUtility.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPanelRemoveUtilityFocusGained(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        jLabel5.setText("Selected File:");

        txFile.setEditable(false);
        txFile.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 10));

        btnGetStructure.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        btnGetStructure.setText("Recover Compressed Tree");
        btnGetStructure.setMaximumSize(new java.awt.Dimension(67, 23));
        btnGetStructure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetStructureActionPerformed(evt);
            }
        });

        jBtnObjectList.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        jBtnObjectList.setText("Show List of Classes");
        jBtnObjectList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnObjectListActionPerformed(evt);
            }
        });

        jButtonGroupClasses.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        jButtonGroupClasses.setText("Group Classes");
        jButtonGroupClasses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGroupClassesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelRemoveUtilityLayout = new javax.swing.GroupLayout(jPanelRemoveUtility);
        jPanelRemoveUtility.setLayout(jPanelRemoveUtilityLayout);
        jPanelRemoveUtilityLayout.setHorizontalGroup(
            jPanelRemoveUtilityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRemoveUtilityLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelRemoveUtilityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelRemoveUtilityLayout.createSequentialGroup()
                        .addComponent(btnGetStructure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBtnObjectList)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonGroupClasses))
                    .addGroup(jPanelRemoveUtilityLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txFile, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanelRemoveUtilityLayout.setVerticalGroup(
            jPanelRemoveUtilityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRemoveUtilityLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanelRemoveUtilityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(96, 96, 96)
                .addGroup(jPanelRemoveUtilityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGetStructure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnObjectList)
                    .addComponent(jButtonGroupClasses))
                .addGap(59, 59, 59))
        );

        jTab.addTab("Remove Utility", jPanelRemoveUtility);

        jPanelFeatures.setLayout(new java.awt.BorderLayout());

        jButtonFeature.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        jButtonFeature.setText("Recover Functionalities");
        jButtonFeature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFeatureActionPerformed(evt);
            }
        });

        jTxtFeature.setEditable(false);
        jTxtFeature.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 10));

        jLabel3.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        jLabel3.setText("Trace :");

        javax.swing.GroupLayout jPanelFeature_SouthLayout = new javax.swing.GroupLayout(jPanelFeature_South);
        jPanelFeature_South.setLayout(jPanelFeature_SouthLayout);
        jPanelFeature_SouthLayout.setHorizontalGroup(
            jPanelFeature_SouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFeature_SouthLayout.createSequentialGroup()
                .addGroup(jPanelFeature_SouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelFeature_SouthLayout.createSequentialGroup()
                        .addGap(281, 281, 281)
                        .addComponent(jButtonFeature))
                    .addGroup(jPanelFeature_SouthLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTxtFeature, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanelFeature_SouthLayout.setVerticalGroup(
            jPanelFeature_SouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFeature_SouthLayout.createSequentialGroup()
                .addContainerGap(103, Short.MAX_VALUE)
                .addGroup(jPanelFeature_SouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTxtFeature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(79, 79, 79)
                .addComponent(jButtonFeature)
                .addGap(20, 20, 20))
        );

        jPanelFeatures.add(jPanelFeature_South, java.awt.BorderLayout.CENTER);

        jTab.addTab("Classification by Functionality", jPanelFeatures);

        jPanelSequenceMining.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        jPanelSequenceMining.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPanelSequenceMiningFocusGained(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        jLabel6.setText("Selected File:");

        txFilePath.setEditable(false);
        txFilePath.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 10));

        btnGetStructure1.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        btnGetStructure1.setText("Recover Compact Tree");
        btnGetStructure1.setMaximumSize(new java.awt.Dimension(67, 23));
        btnGetStructure1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetStructure1ActionPerformed(evt);
            }
        });

        txtFSupport.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        txtFSupport.setText("5");

        jLabel1.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        jLabel1.setText("Minimum Support");

        jLabel2.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 11)); // NOI18N
        jLabel2.setText("%");

        javax.swing.GroupLayout jPanelSequenceMiningLayout = new javax.swing.GroupLayout(jPanelSequenceMining);
        jPanelSequenceMining.setLayout(jPanelSequenceMiningLayout);
        jPanelSequenceMiningLayout.setHorizontalGroup(
            jPanelSequenceMiningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSequenceMiningLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSequenceMiningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelSequenceMiningLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelSequenceMiningLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFSupport, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)))
                .addContainerGap(38, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelSequenceMiningLayout.createSequentialGroup()
                .addContainerGap(295, Short.MAX_VALUE)
                .addComponent(btnGetStructure1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelSequenceMiningLayout.setVerticalGroup(
            jPanelSequenceMiningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSequenceMiningLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanelSequenceMiningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanelSequenceMiningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtFSupport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(84, 84, 84)
                .addComponent(btnGetStructure1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        jTab.addTab("Visualize Compacted Trace", jPanelSequenceMining);

        jPanelText.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Messages ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Microsoft Sans Serif", 0, 11))); // NOI18N
        jPanelText.setMaximumSize(new java.awt.Dimension(510, 99999));
        jPanelText.setMinimumSize(new java.awt.Dimension(100, 100));
        jPanelText.setPreferredSize(new java.awt.Dimension(200, 103));

        jTextPaneMessages.setEditable(false);
        jScrollPane1.setViewportView(jTextPaneMessages);

        javax.swing.GroupLayout jPanelTextLayout = new javax.swing.GroupLayout(jPanelText);
        jPanelText.setLayout(jPanelTextLayout);
        jPanelTextLayout.setHorizontalGroup(
            jPanelTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
        );
        jPanelTextLayout.setVerticalGroup(
            jPanelTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
        );

        jPanelProgress.setMaximumSize(new java.awt.Dimension(368, 14));
        jPanelProgress.setMinimumSize(new java.awt.Dimension(100, 14));
        jPanelProgress.setPreferredSize(new java.awt.Dimension(368, 14));

        labelProgressTask.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 10));

        javax.swing.GroupLayout jPanelProgressLayout = new javax.swing.GroupLayout(jPanelProgress);
        jPanelProgress.setLayout(jPanelProgressLayout);
        jPanelProgressLayout.setHorizontalGroup(
            jPanelProgressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelProgressLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelProgressTask, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(165, Short.MAX_VALUE))
        );
        jPanelProgressLayout.setVerticalGroup(
            jPanelProgressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelProgressTask, javax.swing.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanelLayout = new javax.swing.GroupLayout(jPanel);
        jPanel.setLayout(jPanelLayout);
        jPanelLayout.setHorizontalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanelProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanelText, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)
                    .addComponent(jPanelRepository, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jTab, 0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelLayout.setVerticalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelRepository, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jTab, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelText, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane2.setViewportView(jPanel);

        jSplitPaneMiddle.setLeftComponent(jScrollPane2);

        jSplitPaneDivisor.setRightComponent(jSplitPaneMiddle);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPaneDivisor, javax.swing.GroupLayout.DEFAULT_SIZE, 1137, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPaneDivisor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 688, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void repaintComponents(){
        Graphics g = jPanelText.getGraphics();
        jPanelText.paint(g);
        Graphics g4 = jScrollPaneTree.getGraphics();
        jScrollPaneTree.paint(g4);
        Graphics g3 = jPanelProgress.getGraphics();
        jPanelProgress.paint(g3);
        
    }

//    private void insertMessages(Controller controller) {
//        this.jTextPaneMessages.setText(jTextPaneMessages.getText()+"\n"+controller.getMessages().toString());
//        controller.initialiseMessages();
//    }

    public final void insertTraceTree() {
        File[] files = new File(strCurrentPath).listFiles();
        system = getSO();
        if(files != null){
            jtree = TraceTree.start(files);
            jtree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
            jtree.addTreeSelectionListener(this);
            jScrollPaneTree.setViewportView(jtree);
            jScrollPaneTree.setVisible(true);
        }else this.jTextPaneMessages.setText(jTextPaneMessages.getText()+"\n"+"It was not possible to generate the tree of traces to the path: "+strCurrentFilePath);
    }

    public void valueChanged(TreeSelectionEvent e) {
       DefaultMutableTreeNode node = (DefaultMutableTreeNode)
                           jtree.getLastSelectedPathComponent();
       isValidTrace(node);
    }

    private void isValidTrace(DefaultMutableTreeNode selectedNode){
        if(selectedNode != null){
           File[] files = new File(strCurrentPath).listFiles();
           if(files != null){
               String path ="";
               for(File file : files){
                   if(file.getName().equals(selectedNode.toString())){
                       strCurrentPathSelected = file.getAbsolutePath();
                       txtFieldSelectedTraceCompressor.setText(file.getName());
                       txFilePath.setText(file.getName());
                       jTxtFeature.setText(file.getName());
                       break;
                   }
                   else if(file.getName().equals(selectedNode.getPath()[1].toString())){
                       path = file.getAbsolutePath()+system+selectedNode.getPath()[2].toString();
                       for(int i=3; i<selectedNode.getPath().length; i++){
                           path = path + system+selectedNode.getPath()[i].toString();
                       }
                       strCurrentPathSelected = path;
                       txtFieldSelectedTraceCompressor.setText(path);
                       txFilePath.setText(path);
                       jTxtFeature.setText(path);
                       txFile.setText(path);
                       break;
                 }
               }
           }
      }
    }

    private String getSO(){
        String dir = "";
        if(!strCurrentPath.startsWith("/")) dir = "\\";
        else dir = "/";
        return dir;
    }

    private File getFile(File file) {
        if(file.isDirectory()) return getFile(file.listFiles()[0]);
        return file;
    }

    //txtFNroClusters.getText(), txtFNroCoberturaChamadas.getText(), txtFNroNivel.getText(), strCurrentPathSelected,
     private void insertNewInternalFrame(JInternalFrame treeDisplay) {
        jInternalFrameTree = treeDisplay;
        jLayeredPane1.add(jInternalFrameTree, JLayeredPane.PALETTE_LAYER);
        jInternalFrameTree.setMaximizable(true);
        jInternalFrameTree.setDefaultCloseOperation(JInternalFrame.DISPOSE_ON_CLOSE);
        jInternalFrameTree.setIconifiable(true);
        jInternalFrameTree.setClosable(true);
        jInternalFrameTree.setVisible(true);
        jInternalFrameTree.addMouseListener(new MouseAdapter(){
            public void mouseClicked(MouseEvent event){
                    doMouseClicked(event);
                }

            private void doMouseClicked(MouseEvent event) {
                if(event.getButton() == MouseEvent.BUTTON3 && event.getComponent().getParent().getParent() instanceof JSplitPane){
                      jInternalFrameTree = ((JInternalFrame)event.getComponent());
                      JPopupMenu jPopupMenu = new JPopupMenu();
                      JMenuItem jMenuItem = new JMenuItem("Window Preview");
                      jPopupMenu.add(jMenuItem);
                      jMenuItem.addActionListener(new ActionListener() {
                         public void actionPerformed(ActionEvent e) {
                            setNewWindowEnabled(false);
                         }

                        private void setNewWindowEnabled(boolean b) {
                            JFrame frame = new JFrame();
                            JMenuBar jMenuBar = new JMenuBar();
                            JMenu jMenu = new JMenu("Restore size");
                            jMenu.addMouseListener(new MouseAdapter() {
                                public void mouseClicked(MouseEvent event){
                                    jMenuSelected(event);
                                }

                                private void jMenuSelected(MouseEvent event) {
                                    if(event.getComponent() instanceof JMenu){
                                        Container container = event.getComponent().getParent().getParent().getParent();
                                        jInternalFrameTree = new JInternalFrame(((JFrame)event.getComponent().getParent().getParent().getParent().getParent()).getTitle());
                                        jInternalFrameTree.setToolTipText("teste");
                                        //jInternalFrameTree.add(null);
                                        insertNewInternalFrame(jInternalFrameTree);
                                    }
                                }
                            });
                            jMenuBar.add(jMenu);
                            frame.setJMenuBar(jMenuBar);
                            frame.setTitle(jInternalFrameTree.getTitle());
                            frame.add(jInternalFrameTree.getContentPane());
                            try {
                                jInternalFrameTree.setClosed(true);
                            } catch (PropertyVetoException ex) {
                                Logger.getLogger(Tool.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            //jInternalFrameTree.dispose();
                            //jInternalFrameTree = null;
                            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                            frame.setSize(800, 800);
                            frame.setVisible(true);
                        }
                      });
                      jPopupMenu.show(event.getComponent(), event.getX(), event.getY());
                }
            }
        });
    }

     public Object doStep1() throws IOException {
        Object obj = controller.step1(jComboBoxStep1.getSelectedIndex(), strCurrentPathSelected, jPanelProgress, labelProgressTask);
        obj = doStep2(new File(obj.toString()));
        return doStep3(new File(obj.toString()));
    }

    public Object doStep2(File newFilePathStep) throws IOException{
        return controller.step2(this.jComboBoxStep2.getSelectedIndex(), newFilePathStep, jPanelProgress, labelProgressTask);
    }

    public Object doStep3(File newFilePathStep) throws IOException{
        return controller.step3(jComboBoxStep3.getSelectedIndex(), newFilePathStep, jPanelProgress, labelProgressTask);
    }



    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        jSplitPaneMiddle.setDividerLocation(470);
    }//GEN-LAST:event_formComponentResized

    private void jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActionPerformed
        JFileChooser fc;
        if(strCurrentPath.compareTo("")!=0){
            fc = new JFileChooser(strCurrentPath);
        }else{
            fc = new JFileChooser();
        }
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int intReturn = fc.showOpenDialog(txtFPath);
        if(intReturn == JFileChooser.APPROVE_OPTION){
            strCurrentPath=fc.getSelectedFile().getAbsolutePath();
            txtFPath.setText(strCurrentPath);
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch(Exception ex){
                this.jTextPaneMessages.setText(jTextPaneMessages.getText()+"\n"+ex.toString());
            }
            insertTraceTree();
        }
}//GEN-LAST:event_jButtonActionPerformed

    private void jTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabMouseClicked

}//GEN-LAST:event_jTabMouseClicked

    private void jPanelRemoveUtilityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanelRemoveUtilityFocusGained
        tree = new builder.tree.Tree();
}//GEN-LAST:event_jPanelRemoveUtilityFocusGained

    private void jButtonGroupClassesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGroupClassesActionPerformed
        if(!list.getSizeSelectionObjects()) {
            list.selectNodes();
        }
        list.groupObjects(clusters);
        insertNewInternalFrame(list.recoverGroups());
    }//GEN-LAST:event_jButtonGroupClassesActionPerformed

    private void jBtnObjectListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnObjectListActionPerformed
        list = new ObjectList(objectList);
        insertNewInternalFrame(list.generateList());
}//GEN-LAST:event_jBtnObjectListActionPerformed

    private void btnGetStructureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetStructureActionPerformed
        jTextPaneMessages.setText("");
        labelProgressTask.setText(LOG.recoveringTreeView());
        repaintComponents();
        File file = new File(strCurrentPathSelected);
        //String dir = getSO();
        file = getFile(file);
        if((tree == null )|| !tree.getFilePath().equals(file.getAbsolutePath())){
            tree = new builder.tree.Tree(file.getAbsolutePath());
            try {
                numberOfNodes = tree.generateTree();
            } catch (IOException ex) {
                this.jTextPaneMessages.setText(jTextPaneMessages.getText()+"\n"+ex.toString());
            } catch (NullPointerException ex){
                this.jTextPaneMessages.setText(jTextPaneMessages.getText()+"\n"+ex.toString());
            } catch(ArrayIndexOutOfBoundsException ex){
                this.jTextPaneMessages.setText(jTextPaneMessages.getText()+"\n"+ex.toString());
            } catch (Error ex) {
                this.jTextPaneMessages.setText( jTextPaneMessages.getText()+"\n"+ex.getMessage());
            }

        }
        if(tree.getTree() != null && numberOfNodes > 0){
            try {
                TreeDisplay treeDisplay = new TreeDisplay(null);
                boolean updated = treeDisplay.begin(tree.getTree(), strCurrentPathSelected, getSO(), numberOfNodes);
                insertNewInternalFrame(treeDisplay.getTree());
                clusters = treeDisplay.getBestClusters();
                objectList = treeDisplay.getAmalgamateClasses();
                if(updated){
                    insertTraceTree();
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Tool.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(Tool.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(Tool.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedLookAndFeelException ex) {
                Logger.getLogger(Tool.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Error ex) {
                this.jTextPaneMessages.setText(jTextPaneMessages.getText()+"\n"+ex.toString());
            }
        }
        labelProgressTask.setText(LOG.recoveredTreeView());
}//GEN-LAST:event_btnGetStructureActionPerformed

    private void jButtonFeatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFeatureActionPerformed
        jTextPaneMessages.setText("");
        labelProgressTask.setText(LOG.recoveringFunctionalities());
        repaintComponents();
//        Controller control = null;
//        if(new File(strCurrentPathSelected).isFile()) control = new Controller(strCurrentPathSelected);
//        else control = new Controller(strCurrentPathSelected+getSO()+"trace.mark.txt");
//        try {
//            control.readFeatureMarkFile();
//            control.splitFeatures();
//            insertTraceTree();
//            labelProgressTask.setText(LOG.recoveredFunctionalities());
//        } catch (FileNotFoundException ex) {
//            this.jTextPaneMessages.setText(jTextPaneMessages.getText()+"\n"+ex.toString());
//        } catch (IOException ex) {
//            this.jTextPaneMessages.setText(jTextPaneMessages.getText()+"\n"+ex.toString());
//        } catch (SecurityException ex) {
//            this.jTextPaneMessages.setText(jTextPaneMessages.getText()+"\n"+ex.toString());
//        } catch (Error ex) {
//            this.jTextPaneMessages.setText(jTextPaneMessages.getText()+"\n"+ex.toString());
//        }
}//GEN-LAST:event_jButtonFeatureActionPerformed

    private void btnDeleteDirectoriessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDirectoriessActionPerformed
//        Controller.removeTrace(strCurrentPathSelected);
        jTextPaneMessages.setText("");
        insertTraceTree();
        strCurrentPathSelected="";
}//GEN-LAST:event_btnDeleteDirectoriessActionPerformed

    private void btnExecutePreProcessinggActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecutePreProcessinggActionPerformed
        jTextPaneMessages.setText("");
        if(!txtFieldSelectedTraceCompressor.getText().endsWith(".info")){
            String dir = getSO();
            String step = "Passo 1";
            try{
//                controller = new Controller(this.txtMetrics.getText(), dir);
//                strCurrentPathSelected = controller.alterTraceRepository(strCurrentPathSelected);
                File newFilePathStep = null;
                jTextPaneMessages.setText("");
                repaintComponents();
                //jListFiles.setModel(new DefaultListModel());
                if((this.jComboBoxStep1.getSelectedIndex() == 1 || this.jComboBoxStep2.getSelectedIndex() == 1 || this.jComboBoxStep3.getSelectedIndex() == 2) && txtMetrics.getText().equals("")){
                    this.jTextPaneMessages.setText(jTextPaneMessages.getText() + LOG.compressorInvalidParameters());
                }else{
//                    controller.setStep1(this.jComboBoxStep1.getSelectedIndex(), this.strCurrentPathSelected, jPanelProgress, labelProgressTask);
                    //Thread th = new Thread(controller);
                    final SwingWorker worker = new SwingWorker() {
                        public Object construct() {
                            try {
                                return doStep1();
                            } catch (IOException ex) {
                                LOG.errorOcurred(ex.getMessage());
                            }
                            return null;
                        }
                        public void finished() {
                           // insertMessages(controller);
                            labelProgressTask.setText(LOG.getMessageStep2() + jComboBoxStep2.getSelectedItem());
                            repaintComponents();
                            insertTraceTree();
                            labelProgressTask.setText(LOG.updatedRepository());
                        }

                    };
                    worker.start();
                    //newFilePathStep = controller.step1(this.jComboBoxStep1.getSelectedIndex(), this.strCurrentPathSelected, jPanelProgress, labelProgressTask);
                    //                        insertMessages(controller);
                    //                        labelProgressTask.setText("Executando o Passo 2:"+this.jComboBoxStep2.getSelectedItem());
                    //                        repaintComponents();
                    if(this.jComboBoxStep2.getSelectedIndex() > 0){
                        step = "Passo 2";
                        final SwingWorker worker2 = new SwingWorker() {
                            public Object construct() {
                                //insertMessages(controller);
                                labelProgressTask.setText(LOG.getMessageStep3() + jComboBoxStep3.getSelectedItem());
//                                try {
//                                    return doStep2(new File(worker.get().toString()));
//                                } catch (IOException ex) {
//                                    Logger.getLogger(Tool.class.getName()).log(Level.SEVERE, null, ex);
//                                }
                                return null;
                            }
                            public void finished() {
                                repaintComponents();
                                insertTraceTree();
                                labelProgressTask.setText(LOG.updatedRepository());
                            }
                        };
                        worker2.start();
                        //newFilePathStep = controller.step2(this.jComboBoxStep2.getSelectedIndex(), newFilePathStep, jPanelProgress, labelProgressTask);
                        //insertMessages(controller);
                        if(this.jComboBoxStep3.getSelectedIndex() > 0){
                            step = "Passo 3";
                            SwingWorker worker3 = new SwingWorker() {
                                public Object construct() {
//                                    try {
//                                        return doStep3(new File(worker2.get().toString()));
//                                    } catch (IOException ex) {
//                                        Logger.getLogger(Tool.class.getName()).log(Level.SEVERE, null, ex);
//                                    }
                                    return null;
                                }
                                public void finished() {
//                                    insertMessages(controller);
                                    labelProgressTask.setText(LOG.updatingRepository());
                                    repaintComponents();
                                    insertTraceTree();
                                    labelProgressTask.setText(LOG.updatedRepository());
                                }
                            };
                            worker3.start();
                            //                                labelProgressTask.setText("Executando o Passo 3:"+this.jComboBoxStep3.getSelectedItem());
                            //                                repaintComponents();
                            //newFilePathStep = controller.step3(this.jComboBoxStep3.getSelectedIndex(), newFilePathStep, jPanelProgress, labelProgressTask);
                            //                                insertMessages(controller);
                        }
                    }

                }
            }catch(NumberFormatException e){
                this.jTextPaneMessages.setText(jTextPaneMessages.getText() + LOG.numberFormatException() + e.toString());
//            }catch(IOException e){
//                this.jTextPaneMessages.setText(jTextPaneMessages.getText()+"\n"+e.toString());
            } catch(Exception e){
                this.jTextPaneMessages.setText(jTextPaneMessages.getText()+ LOG.errorOcurred(step) + e.toString());
            } catch(Error error){
                this.jTextPaneMessages.setText(jTextPaneMessages.getText()+"\n "+error.toString() + " "+strCurrentPathSelected);
            }
        }
}//GEN-LAST:event_btnExecutePreProcessinggActionPerformed

    private void jComboBoxStep3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxStep3ItemStateChanged

}//GEN-LAST:event_jComboBoxStep3ItemStateChanged

    private void jComboBoxStep2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxStep2ItemStateChanged
        if(this.jComboBoxStep2.getSelectedIndex() > 0){
            this.jComboBoxStep3.setVisible(true);
            jLabel9.setVisible(true);
            this.jLabel15.setVisible(true);
            this.txtMetrics.setVisible(true);
        } else{
            this.jComboBoxStep3.setVisible(false);
            jLabel9.setVisible(false);
            this.jLabel15.setVisible(false);
            this.txtMetrics.setVisible(false);
        }
}//GEN-LAST:event_jComboBoxStep2ItemStateChanged

    private void jComboBoxStep1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxStep1ActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jComboBoxStep1ActionPerformed

    private void jComboBoxStep1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxStep1ItemStateChanged
        if(jComboBoxStep1.getSelectedIndex() == 1){
            jLabel15.setVisible(true);
            txtMetrics.setVisible(true);
        }else if(jComboBoxStep1.getSelectedIndex() == 0 && jComboBoxStep2.getSelectedIndex()!= 1 && jComboBoxStep3.getSelectedIndex() != 2){
            this.jLabel15.setVisible(false);
            this.txtMetrics.setVisible(false);
        }
}//GEN-LAST:event_jComboBoxStep1ItemStateChanged

    private void btnGetStructure1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetStructure1ActionPerformed
        SwingWorker worker = new SwingWorker() {
            public Object construct() {
                try {
                    return miningSequence(new File(strCurrentPathSelected), Double.parseDouble(txtFSupport.getText()));
                } catch (IOException ex) {
                    Logger.getLogger(Tool.class.getName()).log(Level.SEVERE, null, ex);
                }
                return null;
            }
            public void finished() {
//                insertMessages(controller);
                labelProgressTask.setText(LOG.updatingRepository());
                repaintComponents();
                insertTraceTree();
                labelProgressTask.setText(LOG.updatedRepository());
            }

            private Object miningSequence(File file, double support) throws IOException {
                return controller.miningSequence(file, support);
            }
        };
        worker.start();
        worker.finished();
        tree = new builder.tree.Tree(worker.get().toString(), strCurrentPathSelected, controller.getSeparatorDirectory());
        try {
            tree.generateTree();
        } catch (Error ex) {
            Logger.getLogger(Tool.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Tool.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ArrayIndexOutOfBoundsException ex) {
            Logger.getLogger(Tool.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGetStructure1ActionPerformed

    private void jPanelSequenceMiningFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanelSequenceMiningFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanelSequenceMiningFocusGained


private void insertSequenceTree() {
     jtreeGSP.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
     jtreeGSP.addTreeSelectionListener(this);
     JScrollPane jScrollPaneGSP = new JScrollPane();
     jScrollPaneGSP.setViewportView(jtreeGSP);
     JInternalFrame jInternalFrameGSP = new JInternalFrame();
     jInternalFrameGSP.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
     jInternalFrameGSP.getContentPane().add(jScrollPaneGSP, java.awt.BorderLayout.CENTER);
     jInternalFrameGSP.setSize(400, 400);
     jInternalFrameGSP.setTitle(strCurrentPathSelected);
     insertNewInternalFrame(jInternalFrameGSP);
}

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Tool frame = new Tool();
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
            }
        });
    }

    private Controller controller = new Controller();
    private int numberOfNodes;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteDirectoriess;
    private javax.swing.JButton btnExecutePreProcessingg;
    private javax.swing.JButton btnGetStructure;
    private javax.swing.JButton btnGetStructure1;
    private javax.swing.JButton jBtnObjectList;
    private javax.swing.JButton jButton;
    private javax.swing.JButton jButtonFeature;
    private javax.swing.JButton jButtonGroupClasses;
    private javax.swing.JComboBox jComboBoxStep1;
    private javax.swing.JComboBox jComboBoxStep2;
    private javax.swing.JComboBox jComboBoxStep3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelCompressors;
    private javax.swing.JPanel jPanelFeature_South;
    private javax.swing.JPanel jPanelFeatures;
    private javax.swing.JPanel jPanelNorthCompressor;
    private javax.swing.JPanel jPanelProgress;
    private javax.swing.JPanel jPanelRemoveUtility;
    private javax.swing.JPanel jPanelRepository;
    private javax.swing.JPanel jPanelSequenceMining;
    private javax.swing.JPanel jPanelText;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPaneTree;
    private javax.swing.JSplitPane jSplitPaneDivisor;
    private javax.swing.JSplitPane jSplitPaneMiddle;
    private javax.swing.JTabbedPane jTab;
    private javax.swing.JTextPane jTextPaneMessages;
    private javax.swing.JTextField jTxtFeature;
    private javax.swing.JLabel labelProgressTask;
    private javax.swing.JTextField txFile;
    private javax.swing.JTextField txFilePath;
    private javax.swing.JTextField txtFPath;
    private javax.swing.JTextField txtFSupport;
    private javax.swing.JTextField txtFieldSelectedTraceCompressor;
    private javax.swing.JTextField txtMetrics;
    // End of variables declaration//GEN-END:variables
}
